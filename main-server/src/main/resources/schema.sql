DROP TABLE IF EXISTS state_event CASCADE;
DROP TABLE IF EXISTS locations CASCADE;
DROP TABLE IF EXISTS category_event CASCADE;
DROP TABLE IF EXISTS request_moderation CASCADE;
DROP TABLE IF EXISTS compilation CASCADE;
DROP TABLE IF EXISTS compilation_event CASCADE;
DROP TABLE IF EXISTS status_request CASCADE;
DROP TABLE IF EXISTS request_event CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS views CASCADE;
DROP TABLE IF EXISTS events CASCADE;

CREATE TABLE events (
    event_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR NOT NULL,
    category_id INT NOT NULL,
    initiator INT NOT NULL,
    location_id INT NOT NULL,
    title VARCHAR NOT NULL,
    created_on TIMESTAMP NOT NULL,
    description VARCHAR NOT NULL,
    event_date TIMESTAMP NOT NULL,
    paid BOOLEAN NOT NULL,
    participant_limit INT NOT NULL,
    published_on TIMESTAMP NOT NULL,
    request_moderation BOOLEAN NOT NULL,
    state INT NOT NULL,
    CONSTRAINT pk_events PRIMARY KEY (event_id),
    FOREIGN KEY (category_id) REFERENCES category_event (category_id) ON DELETE CASCADE,
    FOREIGN KEY (initiator) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (location_id) REFERENCES locations (location_id) ON DELETE CASCADE,
    FOREIGN KEY (state) REFERENCES state_event (state_id) ON DELETE CASCADE
);

CREATE TABLE state_event (
    state_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    state_name VARCHAR UNIQUE NOT NULL,
    CONSTRAINT pk_state_event PRIMARY KEY (state_id)
);

CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_name VARCHAR NOT NULL,
    email VARCHAR UNIQUE NOT NULL,
    CONSTRAINT pk_users PRIMARY KEY (user_id)
);

CREATE TABLE categories (
    category_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    category_name VARCHAR UNIQUE NOT NULL,
    CONSTRAINT pk_category_event PRIMARY KEY (category_id)
);

CREATE TABLE request_event (
    request_event_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id INT NOT NULL,
    created TIMESTAMP NOT NULL,
    requester INT NOT NULL,
    status INT NOT NULL,
    CONSTRAINT pk_request_event PRIMARY KEY (request_event_id),
    FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE,
    FOREIGN KEY (requestor) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (status) REFERENCES status_request (status_id) ON DELETE CASCADE
);

CREATE TABLE status_request (
    status_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    status_name VARCHAR UNIQUE NOT NULL,
    CONSTRAINT pk_status_request PRIMARY KEY (status_id)
);

CREATE TABLE locations (
    location_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    latitude FLOAT(24) NOT NULL,
    longitude FLOAT(24) NOT NULL,
    CONSTRAINT pk_locations PRIMARY KEY (location_id)
);

CREATE TABLE views (
    view_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id INT NOT NULL,
    event_id INT NOT NULL,
    view_date TIMESTAMP NOT NULL,
    CONSTRAINT pk_views PRIMARY KEY (view_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE
);

CREATE TABLE request_moderation (
    request_moderation_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    event_id INT NOT NULL,
    description VARCHAR NOT NULL,
    request_date TIMESTAMP NOT NULL,
    CONSTRAINT pk_request_moderation PRIMARY KEY (request_moderation_id),
    FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE
);

CREATE TABLE compilation (
    compilation_id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR NOT NULL,
    pinned BOOLEAN NOT NULL,
    CONSTRAINT pk_compilation PRIMARY KEY (compilation_id)
);

CREATE TABLE compilation_event (
    event_id INT NOT NULL,
    compilation_id INT NOT NULL,
    FOREIGN KEY (event_id) REFERENCES events (event_id) ON DELETE CASCADE,
    FOREIGN KEY (compilation_id) REFERENCES compilations (compilation_id) ON DELETE CASCADE
);




